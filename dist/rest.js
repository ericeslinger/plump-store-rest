"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var SocketIO = require("socket.io-client");
var mergeOptions = require("merge-options");
var plump_1 = require("plump");
var RestStore = (function (_super) {
    __extends(RestStore, _super);
    function RestStore(opts) {
        var _this = _super.call(this, opts) || this;
        _this.httpInProgress = {};
        _this.options = Object.assign({}, {
            baseURL: 'http://localhost/api',
            onlyFireSocketEvents: false,
        }, opts);
        _this.axios = _this.options.axios || axios_1.default.create(_this.options);
        if (_this.options.socketURL) {
            _this.io = SocketIO(_this.options.socketURL, { transports: ['websocket'] });
            _this.io.on('connect', function () { return console.log('connected to socket'); });
            _this.io.on('plumpUpdate', function (data) { return _this.updateFromSocket(data); });
        }
        return _this;
    }
    RestStore.prototype.debounceGet = function (url) {
        var _this = this;
        if (!this.httpInProgress[url]) {
            this.httpInProgress[url] = this.axios.get(url).then(function (v) {
                delete _this.httpInProgress[url];
                return v;
            });
        }
        return this.httpInProgress[url];
    };
    RestStore.prototype.updateFromSocket = function (data) {
        try {
            if (data.eventType === 'update') {
                this.fireWriteUpdate({
                    type: data.item.type,
                    id: data.item.id,
                    invalidate: ['attributes'],
                });
            }
            else if (data.eventType === 'relationshipCreate') {
                this.fireWriteUpdate({
                    type: data.type,
                    id: data.id,
                    invalidate: [data.field],
                });
            }
            else if (data.eventType === 'relationshipUpdate') {
                this.fireWriteUpdate({
                    type: data.type,
                    id: data.id,
                    invalidate: [data.field],
                });
            }
            else if (data.eventType === 'relationshipDelete') {
                this.fireWriteUpdate({
                    type: data.type,
                    id: data.id,
                    invalidate: [data.field],
                });
            }
        }
        catch (e) {
            console.log('ERROR');
            console.log(e);
        }
    };
    RestStore.prototype.writeAttributes = function (value) {
        var _this = this;
        return Promise.resolve()
            .then(function () {
            if (value.id) {
                return _this.axios.patch("/" + value.type + "/" + value.id, value);
            }
            else if (_this.terminal) {
                return _this.axios.post("/" + value.type, value);
            }
            else {
                throw new Error('Cannot create new content in a non-terminal store');
            }
        })
            .then(function (response) {
            var result = response.data;
            if (!_this.options.onlyFireSocketEvents) {
                _this.fireWriteUpdate({
                    type: result.type,
                    id: result.id,
                    invalidate: ['attributes'],
                });
            }
            return result;
        });
    };
    RestStore.prototype.fixDates = function (d) {
        if (!d.attributes) {
            return d;
        }
        var schema = this.getSchema(d.type);
        var override = {
            attributes: {},
        };
        Object.keys(schema.attributes)
            .filter(function (attr) { return schema.attributes[attr].type === 'date'; })
            .forEach(function (dateAttr) {
            override.attributes[dateAttr] = new Date(d.attributes[dateAttr]);
        });
        return mergeOptions({}, d, override);
    };
    RestStore.prototype.readAttributes = function (item) {
        var _this = this;
        if (!item.id) {
            console.log(item);
            throw new Error('cannot fetch item with no id');
        }
        return Promise.resolve()
            .then(function () { return _this.debounceGet("/" + item.type + "/" + item.id); })
            .then(function (reply) {
            if (reply.status === 404) {
                return null;
            }
            else if (reply.status !== 200) {
                throw new Error(reply.statusText);
            }
            else {
                var result = reply.data;
                if (result.included) {
                    result.included.forEach(function (includedData) {
                        _this.fireReadUpdate(_this.fixDates(includedData));
                    });
                }
                return _this.fixDates(result);
            }
        })
            .catch(function (err) {
            if (err.response && err.response.status === 404) {
                return null;
            }
            else {
                throw err;
            }
        });
    };
    RestStore.prototype.readRelationship = function (value, relName) {
        var _this = this;
        return this.debounceGet("/" + value.type + "/" + value.id + "/" + relName)
            .then(function (response) {
            if (response.data.included) {
                response.data.included.forEach(function (item) {
                    _this.fireReadUpdate(item);
                });
            }
            return response.data;
        })
            .catch(function (err) {
            if (err.response && err.response.status === 404) {
                return [];
            }
            else {
                throw err;
            }
        });
    };
    RestStore.prototype.writeRelationshipItem = function (value, relName, child) {
        var _this = this;
        return this.axios
            .put("/" + value.type + "/" + value.id + "/" + relName, child)
            .then(function (res) {
            if (!_this.options.onlyFireSocketEvents) {
                _this.fireWriteUpdate({
                    type: value.type,
                    id: value.id,
                    invalidate: ["relationships." + relName],
                });
            }
            return res.data;
        });
    };
    RestStore.prototype.deleteRelationshipItem = function (value, relName, child) {
        var _this = this;
        return this.axios
            .delete("/" + value.type + "/" + value.id + "/" + relName + "/" + child.id)
            .then(function (res) {
            if (!_this.options.onlyFireSocketEvents) {
                _this.fireWriteUpdate({
                    type: value.type,
                    id: value.id,
                    invalidate: ["relationships." + relName],
                });
            }
            return res.data;
        });
    };
    RestStore.prototype.delete = function (value) {
        var _this = this;
        return this.axios.delete("/" + value.type + "/" + value.id).then(function (response) {
            if (!_this.options.onlyFireSocketEvents) {
                _this.fireWriteUpdate({
                    type: value.type,
                    id: value.id,
                    invalidate: ['attributes'],
                });
            }
            return response.data;
        });
    };
    RestStore.prototype.query = function (type, q) {
        var _this = this;
        return this.axios.get("/" + type, { params: q }).then(function (response) {
            if (response.data.included) {
                response.data.included.forEach(function (item) {
                    _this.fireReadUpdate(_this.fixDates(item));
                });
            }
            return response.data.data.map(function (v) { return _this.fixDates(v); });
        });
    };
    return RestStore;
}(plump_1.Storage));
exports.RestStore = RestStore;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
