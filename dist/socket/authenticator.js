"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ulid = require("ulid");
var rxjs_1 = require("rxjs");
var Authenticator = (function () {
    function Authenticator(store) {
        var _this = this;
        this.store = store;
        this._key$ = new rxjs_1.BehaviorSubject(null);
        this._state$ = new rxjs_1.BehaviorSubject('untested');
        this._method$ = new rxjs_1.Subject();
        this._you$ = new rxjs_1.Subject();
        this.state$ = this._state$.asObservable();
        this.key$ = this._key$.asObservable();
        this.method$ = this._method$.asObservable();
        this.you$ = this._you$.asObservable();
        this.nonce = ulid();
        this.store.io.on(this.nonce, function (msg) {
            switch (msg.response) {
                case 'token':
                    return _this.dispatchToken(msg);
                case 'startauth':
                    return _this.dispatchStart(msg);
                case 'invalidRequest':
                    return _this.dispatchInvalid(msg);
                case 'testkey':
                    return _this.dispatchTestKey(msg);
            }
        });
    }
    Authenticator.prototype.dispatchToken = function (msg) {
        if (msg.status === 'success') {
            this._state$.next('testing');
            this.attemptKey(msg.token);
        }
    };
    Authenticator.prototype.dispatchStart = function (msg) {
        this._method$.next(msg.types);
    };
    Authenticator.prototype.dispatchInvalid = function (msg) {
        this._state$.next('error');
        console.log('Error - invalid authentication channel message sent');
        console.log(msg);
    };
    Authenticator.prototype.dispatchTestKey = function (msg) {
        var _this = this;
        if (msg.auth === true) {
            this.store.axios.defaults.headers.common['Authorization'] = "Bearer " + msg.token;
            this._key$.next(msg.token);
            if (msg.you) {
                this._you$.next(msg.you);
            }
            if (msg.included) {
                msg.included.forEach(function (val) { return _this.store.fireReadUpdate(val); });
            }
            this._state$.next('ready');
        }
        else {
            console.log('invalid key');
            this.initiateLogin();
        }
    };
    Authenticator.prototype.attemptKey = function (k) {
        this._state$.next('testing');
        var req = {
            request: 'testkey',
            key: k,
            responseKey: this.nonce,
        };
        this.store.io.emit('auth', req);
    };
    Authenticator.prototype.initiateLogin = function () {
        this._state$.next('invalid');
        var req = {
            request: 'startauth',
            nonce: this.nonce,
            responseKey: this.nonce,
        };
        this.store.io.emit('auth', req);
    };
    return Authenticator;
}());
exports.Authenticator = Authenticator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
